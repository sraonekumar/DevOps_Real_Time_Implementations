---
- name: Deploy React App
  hosts: all
  become: yes

  vars:
    react_app_repo: "https://github.com/sraonekumar/DevOps_Real_Time_Implementations.git"
    react_app_dir: "/app"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install necessary packages
      apt:
        name:
          - nginx
          - git
          - nodejs
          - npm
        state: present


    - name: Clone the React app from GitHub
      git:
        repo: "{{ react_app_repo }}"
        dest: "{{ react_app_dir }}"
        update: yes


    - name: Install Node.js dependencies
      npm:
        path: "{{ react_app_dir }}/react-shop"
        state: present
        production: yes

    - name: Build the React app
      command: npm run build
      args:
        chdir: "{{ react_app_dir }}/react-shop"

    - name: Copy the built app to Nginx html directory
      copy:
        src: "{{ react_app_dir }}/react-shop/build/"
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: 0755
        remote_src: yes

    - name: Configure Nginx to serve the React app
      copy:
        content: |
          server {
              listen 80;
              server_name yourdomain.com;

              root /var/www/html;
              index index.html index.htm;

              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
        dest: /etc/nginx/sites-available/react_app
        owner: root
        group: root
        mode: 0644

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Enable React app Nginx configuration
      file:
        src: /etc/nginx/sites-available/react_app
        dest: /etc/nginx/sites-enabled/react_app
        state: link
    - name: Restart Nginx to apply changes
      service:
        name: nginx
        state: restarted


# Installing node exporter to moniter and scrape metric to prometheus 

  tasks:
    - name: Download Node Exporter archive
      get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v1.2.2/node_exporter-1.2.2.linux-amd64.tar.gz"
        dest: "/tmp/node_exporter.tar.gz"
        mode: 0644

    - name: Extract Node Exporter archive
      ansible.builtin.unarchive:
        src: "/tmp/node_exporter.tar.gz"
        dest: "/opt"
        remote_src: yes

    - name: Create Node Exporter symlink
      ansible.builtin.file:
        src: "/opt/node_exporter-1.2.2.linux-amd64/node_exporter"
        dest: "/usr/local/bin/node_exporter"
        state: link

    - name: Configure Node Exporter as a service
      ansible.builtin.template:
        src: node_exporter.service.j2  # Template file for Node Exporter service
        dest: "/etc/systemd/system/node_exporter.service"
      notify: restart node exporter

    - name: Ensure Node Exporter service is started and enabled
      ansible.builtin.service:
        name: node_exporter
        state: started
        enabled: yes

#  Install Log Stash To scrape to metrics to elk stack 


  tasks:
    - name: Add Logstash APT repository key
      apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present

    - name: Add Logstash APT repository
      apt_repository:
        repo: deb https://artifacts.elastic.co/packages/7.x/apt stable main
        state: present
        filename: elastic-7.x

    - name: Install Logstash
      apt:
        name: logstash
        state: present

    - name: Ensure Logstash service is started and enabled
      service:
        name: logstash
        state: started
        enabled: yes

  handlers:
    - name: restart node exporter
      ansible.builtin.systemd:
        name: node_exporter
        state: restarted

    - name: Restart Logstash
      service:
        name: logstash
        state: restarted